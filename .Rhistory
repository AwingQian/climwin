?plotbest
data(MassOutput)
data(Mass)
data(MassClimate)
single <- singlewin(Xvar = MassClimate$Temp, CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass$Mass ~ 1),furthest = 72, closest = 15,
STAT = "mean", FUNC = "L",
FIXED = TRUE, cutoff.day = 20, cutoff.month = 5,
CMISSING = FALSE, CINTERVAL = "D")
plotbest(Dataset = MassOutput, BestModel = single[[1]],
BestModelData = single[[2]])
?singlewim
?singlewin
?plotall
data(MassOutput)
data(Mass)
data(MassClimate)
single <- singlewin(Xvar = MassClimate$Temp, CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass$Mass ~ 1), furthest = 72, closest = 15,
STAT = "mean", FUNC = "L",
FIXED = TRUE, cutoff.day = 20, cutoff.month = 5,
CMISSING = FALSE, CINTERVAL = "D")
single
plotall(Dataset = MassOutput, BestModel = single[[1]],
BestModelData = single[[2]],
CW1 = 0.95, CW2 = 0.5, CW3 = 0.25, HISTQ = 0.99)
single[[1]]
single[[2]]
plotall(Dataset = MassOutput, BestModel = single[[1]],
BestModelData = single[[2]])
plotall(Dataset = MassOutput, BestModel = single[[1]],
BestModelData = single[[2]], Title = "Test")
devtools::load_all("climwin")
plotall(Dataset = MassOutput, BestModel = single[[1]],
BestModelData = single[[2]], Title = "Test")
Dataset = MassOutput
head(Dataset)
plotbetas(Dataset = Dataset, plotall = TRUE, plotallenv = plotenv)
plotenv <- environment()
plotbetas(Dataset = Dataset, plotall = TRUE, plotallenv = plotenv)
plotenv
plotbetas(Dataset = Dataset)
plotdelta(Dataset = Dataset)
a       <- c(CW1, CW2, CW3)
b       <- a[order (-a)]
CWa     <- b[1]
CWb     <- b[2]
CWc     <- b[3]
CW1 = 0.95
CW2 = 0.5
CW3 = 0.25
a       <- c(CW1, CW2, CW3)
b       <- a[order (-a)]
CWa     <- b[1]
CWb     <- b[2]
CWc     <- b[3]
plotweights(Dataset = Dataset, CW1 = CWa, CW2 = CWb, CW3 = CWc)
plotwin(Dataset = Dataset, CW = CWa)
plothist(Dataset = Dataset, DatasetRand = DatasetRand, HISTQ = HISTQ)
DatasetRand = NULL
plothist(Dataset = Dataset, DatasetRand = DatasetRand, HISTQ = HISTQ
)
plotbest(Dataset = Dataset, BestModel = BestModel, BestModelData = BestModelData)
BestModelData = single[[2]]
BestModel = single[[1]]
plotbest(Dataset = Dataset, BestModel = BestModel, BestModelData = BestModelData)
plotbetas(Dataset = Dataset, plotall = TRUE, plotallenv = plotenv)
DELTA  <- plotdelta(Dataset = Dataset)
CW     <- plotweights(Dataset = Dataset, CW1 = CWa, CW2 = CWb, CW3 = CWc)
WINDOW <- plotwin(Dataset = Dataset, CW = CWa)
HIST   <- plothist(Dataset = Dataset, DatasetRand = DatasetRand, HISTQ = HISTQ)
if(is.null(BestModel) == FALSE && is.null(BestModelData) == FALSE){
BEST   <- plotbest(Dataset = Dataset, BestModel = BestModel, BestModelData = BestModelData)
if (Dataset$Function[1] == "L"){
gridExtra::grid.arrange(DELTA, CW, plotenv$BETA, HIST, WINDOW, BEST, nrow = 2, ncol = 3, main = paste(Title))
}
}
Title = NULL
plotbetas(Dataset = Dataset, plotall = TRUE, plotallenv = plotenv)
DELTA  <- plotdelta(Dataset = Dataset)
CW     <- plotweights(Dataset = Dataset, CW1 = CWa, CW2 = CWb, CW3 = CWc)
WINDOW <- plotwin(Dataset = Dataset, CW = CWa)
HIST   <- plothist(Dataset = Dataset, DatasetRand = DatasetRand, HISTQ = HISTQ)
if(is.null(BestModel) == FALSE && is.null(BestModelData) == FALSE){
BEST   <- plotbest(Dataset = Dataset, BestModel = BestModel, BestModelData = BestModelData)
if (Dataset$Function[1] == "L"){
gridExtra::grid.arrange(DELTA, CW, plotenv$BETA, HIST, WINDOW, BEST, nrow = 2, ncol = 3, main = paste(Title))
}}
plotenv <- environment()
plotbetas(Dataset = Dataset, plotall = TRUE, plotallenv = plotenv)
DELTA  <- plotdelta(Dataset = Dataset)
CW     <- plotweights(Dataset = Dataset, CW1 = CWa, CW2 = CWb, CW3 = CWc)
WINDOW <- plotwin(Dataset = Dataset, CW = CWa)
HIST   <- plothist(Dataset = Dataset, DatasetRand = DatasetRand, HISTQ = HISTQ)
plotenv$BETA
grid.arrange(DELTA, CW, plotenv$BETA, HIST, WINDOW, BEST, nrow = 2, ncol = 3, main = paste(Title))
DELTA
CW
plotenv$BETA
HIST
WINDOW
BEST
grid.arrange(DELTA, CW, plotenv$BETA, HIST, WINDOW, BEST)
grid.arrange(DELTA, CW, plotenv$BETA, HIST, WINDOW, BEST, nrow = 2, ncol = 3)\
grid.arrange(DELTA, CW, plotenv$BETA, HIST, WINDOW, BEST, nrow = 2, ncol = 3)
grid.arrange(DELTA, CW, plotenv$BETA, HIST, WINDOW, BEST, nrow = 2, ncol = 3, main = paste(Title))
Title = "PLATE"
grid.arrange(DELTA, CW, plotenv$BETA, HIST, WINDOW, BEST, nrow = 2, ncol = 3, main = paste(Title))
grid.arrange(DELTA, CW, plotenv$BETA, HIST, WINDOW, BEST, nrow = 2, ncol = 3, top = paste(Title))
data(MassOutput)
data(Mass)
data(MassClimate)
single <- singlewin(Xvar = MassClimate$Temp, CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass$Mass ~ 1), furthest = 72, closest = 15,
STAT = "mean", FUNC = "L",
FIXED = TRUE, cutoff.day = 20, cutoff.month = 5,
CMISSING = FALSE, CINTERVAL = "D")
plotall(Dataset = MassOutput, BestModel = single[[1]],
BestModelData = single[[2]],
CW1 = 0.95, CW2 = 0.5, CW3 = 0.25, HISTQ = 0.99)
library(climwin)
devtools::load_all("climwin")
data(MassOutput)
data(Mass)
data(MassClimate)
single <- singlewin(Xvar = MassClimate$Temp, CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass$Mass ~ 1), furthest = 72, closest = 15,
STAT = "mean", FUNC = "L",
FIXED = TRUE, cutoff.day = 20, cutoff.month = 5,
CMISSING = FALSE, CINTERVAL = "D")
plotall(Dataset = MassOutput, BestModel = single[[1]],
BestModelData = single[[2]],
CW1 = 0.95, CW2 = 0.5, CW3 = 0.25, HISTQ = 0.99)
data(Mass, envir = environment())
data(MassClimate, envir = environment())
furthest = 2
closest = 1
STAT = "max"
rand <- randwin(repeats = 1, Xvar = MassClimate$Temp, CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass ~ 1, data = Mass), furthest = 2, closest = 1,
FIXED = FALSE, STAT = "max", FUNC = "L", CMISSING=FALSE)
rand
length(which(is.na(rand)))
rand
length(which(is.na(rand[,5])))
?climatewin
data(Mass)
data(MassClimate)
# Test a fixed window, starting 20 May
# Test for climate windows between 100 and 0 days ago (furthest = 100, closest = 0)
# Fit a linear term for the mean climate (FUNC = "L")
# Test at the resolution of days (CINTERVAL = "D")
MassWin <- climatewin(Xvar = MassClimate$Temp, CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass ~ 1, data = Mass),
furthest = 10, closest = 0,
STAT = "mean", FUNC = "L",
FIXED = TRUE, cutoff.day = 20, cutoff.month = 5,
nrandom = 0, CMISSING = FALSE, CINTERVAL = "D")
Missing
data(Mass)
data(MassClimate)
head(MassClimate)
MassWin <- climatewin(Xvars = list(MassClimate$Temp), CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass ~ 1, data = Mass),
furthest = 10, closest = 0,
STATS = "mean", FUNCS = "L",
FIXED = TRUE, cutoff.day = 20, cutoff.month = 5)
head(MassWin[[3]])
MassWin$combos
MassWin[[1]]$Dataset
head(MassWin[[1]]$Dataset)
Dataset = MassWin[[1]]$Dataset
Dataset$delta  <- Dataset$ModelAICc - min(Dataset$ModelAICc)
Dataset$weight <- (exp(-0.5 * Dataset$delta)) / sum(exp(-0.5 * Dataset$delta))
Dataset
MassWin <- climatewin(Xvars = list(MassClimate$Temp), CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass ~ 1, data = Mass),
furthest = 1, closest = 0,
STATS = "mean", FUNCS = "L",
FIXED = TRUE, cutoff.day = 20, cutoff.month = 5)
Dataset = MassWin[[1]]$Dataset
Dataset
Dataset$delta  <- Dataset$ModelAICc - min(Dataset$ModelAICc)
Dataset$weight <- (exp(-0.5 * Dataset$delta)) / sum(exp(-0.5 * Dataset$delta))
Dataset
Dataset    <- Dataset[order(-Dataset$weight), ]
Dataset$CW <- as.numeric(cumsum(Dataset$weight) <= CW)
DatasetCW  <- subset(Dataset, CW == 1)
CW = 0.95
Dataset    <- Dataset[order(-Dataset$weight), ]
Dataset$CW <- as.numeric(cumsum(Dataset$weight) <= CW)
DatasetCW  <- subset(Dataset, CW == 1)
Dataset
DatasetCW  <- subset(Dataset, CW == 1)
DatasetCW
keep=c("closest", "WindowClose", "WindowOpen")
keep
DatasetCW                  <- DatasetCW[keep]
DatasetCW
DatasetCW                  <- melt(DatasetCW, id = "closest")
DatasetCW
DatasetCW$variable         <- factor(DatasetCW$variable, levels = c("WindowOpen", "WindowClose"))
DatasetCW
DatasetCW
DatasetCW$variable
Dataset$CW <- as.numeric(cumsum(Dataset$weight) <= CW)
DatasetCW  <- subset(Dataset, CW == 1)
keep=c("closest", "WindowClose", "WindowOpen")
DatasetCW                  <- DatasetCW[keep]
DatasetCW                  <- melt(DatasetCW, id = "closest")
DatasetCW
str(DatasetCW)
DatasetCW[which(DatasetCW$variable == "Window Open")]
DatasetCW[which(DatasetCW$variable == "Window Open"), ]
DatasetCW$variable == "Window Open"
DatasetCW
DatasetCW                  <- DatasetCW[keep]
DatasetCW                  <- melt(DatasetCW, id = "closest")
DatasetCW$variable         <- factor(DatasetCW$variable, levels = c("WindowOpen", "WindowClose"))
levels(DatasetCW$variable) <- c("Window Open", "Window Close")
DatasetCW$variable == "Window Open"
DatasetCW
Dataset$delta  <- Dataset$ModelAICc - min(Dataset$ModelAICc)
Dataset$weight <- (exp(-0.5 * Dataset$delta)) / sum(exp(-0.5 * Dataset$delta))
#Order models by weight#
Dataset    <- Dataset[order(-Dataset$weight), ]
Dataset$CW <- as.numeric(cumsum(Dataset$weight) <= CW)
DatasetCW  <- subset(Dataset, CW == 1)
keep=c("closest", "WindowClose", "WindowOpen")
DatasetCW                  <- DatasetCW[keep]
DatasetCW                  <- melt(DatasetCW, id = "closest")
DatasetCW$variable         <- factor(DatasetCW$variable, levels = c("WindowOpen", "WindowClose"))
levels(DatasetCW$variable) <- c("Window Open", "Window Close")
DatasetCW
DatasetCW$variable == "Window Open"
DatasetCW[which(DatasetCW$variable == "Window Open"), ]
?climatewin
library(climwin)
?climatewin
data(Mass)
data(MassClimate)
MassWin <- climatewin(Xvars = list(MassClimate$Temp), CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass ~ 1, data = Mass),
furthest = 5, closest = 0,
STATS = "mean", FUNCS = "L",
FIXED = TRUE, cutoff.day = 20, cutoff.month = 5,
nrandom = 0, CMISSING = FALSE, CINTERVAL = "D")
baseline <- lm(Mass ~ 1, data = Mass)
update(baseline, .~., data = Mass, environment = environment())
library(climwin)
data(Mass)
data(MassClimate)
MassWin <- climatewin(Xvars = list(MassClimate$Temp), CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass ~ 1, weights = Mass, data = Mass),
furthest = 5, closest = 0,
STATS = "mean", FUNCS = "L",
FIXED = TRUE, cutoff.day = 20, cutoff.month = 5,
nrandom = 0, CMISSING = FALSE, CINTERVAL = "D")
devtools::load_all("climwin")
data(Mass)
data(MassClimate)
MassWin <- climatewin(Xvars = list(MassClimate$Temp), CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass ~ 1, weights = Mass, data = Mass),
furthest = 5, closest = 0,
STATS = "mean", FUNCS = "L",
FIXED = TRUE, cutoff.day = 20, cutoff.month = 5,
nrandom = 0, CMISSING = FALSE, CINTERVAL = "D")
devtools::load_all("climwin")
data(Mass)
data(MassClimate)
MassWin <- climatewin(Xvars = list(MassClimate$Temp), CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass ~ 1, weights = Mass, data = Mass),
furthest = 5, closest = 0,
STATS = "mean", FUNCS = "L",
FIXED = TRUE, cutoff.day = 20, cutoff.month = 5,
nrandom = 0, CMISSING = FALSE, CINTERVAL = "D")
devtools::load_all("climwin")
data(Mass)
data(MassClimate)
MassWin <- climatewin(Xvars = list(MassClimate$Temp), CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass ~ 1, weights = Mass, data = Mass),
furthest = 5, closest = 0,
STATS = "mean", FUNCS = "L",
FIXED = TRUE, cutoff.day = 20, cutoff.month = 5,
nrandom = 0, CMISSING = FALSE, CINTERVAL = "D")
devtools::load_all("climwin")
data(Mass)
data(MassClimate)
MassWin <- climatewin(Xvars = list(MassClimate$Temp), CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass ~ 1, weights = Mass, data = Mass),
furthest = 5, closest = 0,
STATS = "mean", FUNCS = "L",
FIXED = TRUE, cutoff.day = 20, cutoff.month = 5,
nrandom = 0, CMISSING = FALSE, CINTERVAL = "D")
test_that("climatewin produces the right output", {
data(Mass, envir = environment())
data(MassClimate, envir = environment())
furthest = 2
closest = 2
STATS = "max"
test <- climatewin(Xvars = list(MassClimate$Temp), CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass ~ 1, data = Mass), furthest = 2, closest = 2,
FIXED = FALSE, STATS = "max", FUNCS = "L", CMISSING = FALSE)
duration  <- (furthest - closest) + 1
MaxMODNO  <- (duration * (duration + 1))/2
expect_true(is.list(test))
expect_false(is.na((test[[1]])[1]))
expect_equal(length(which(is.na(test[[2]]))), 0)
expect_true(ncol(test[[2]]) >= 2)
expect_equal(length(which(is.na(test[[3]]))), 0)
expect_true(ncol(test[[3]]) >= 12)
expect_equal(MaxMODNO, nrow(test[[3]]))
expect_true((test[[3]]["Randomised"])[1, ] == "no")
})
library(devtools)
test_that("climatewin produces the right output", {
data(Mass, envir = environment())
data(MassClimate, envir = environment())
furthest = 2
closest = 2
STATS = "max"
test <- climatewin(Xvars = list(MassClimate$Temp), CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass ~ 1, data = Mass), furthest = 2, closest = 2,
FIXED = FALSE, STATS = "max", FUNCS = "L", CMISSING = FALSE)
duration  <- (furthest - closest) + 1
MaxMODNO  <- (duration * (duration + 1))/2
expect_true(is.list(test))
expect_false(is.na((test[[1]])[1]))
expect_equal(length(which(is.na(test[[2]]))), 0)
expect_true(ncol(test[[2]]) >= 2)
expect_equal(length(which(is.na(test[[3]]))), 0)
expect_true(ncol(test[[3]]) >= 12)
expect_equal(MaxMODNO, nrow(test[[3]]))
expect_true((test[[3]]["Randomised"])[1, ] == "no")
})
data(Mass, envir = environment())
data(MassClimate, envir = environment())
furthest = 2
closest = 2
STATS = "max"
test <- climatewin(Xvars = list(MassClimate$Temp), CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass ~ 1, data = Mass), furthest = 2, closest = 2,
FIXED = FALSE, STATS = "max", FUNCS = "L", CMISSING = FALSE)
duration  <- (furthest - closest) + 1
MaxMODNO  <- (duration * (duration + 1))/2
expect_true(is.list(test))
expect_false(is.na((test[[1]])[1]))
expect_equal(length(which(is.na(test[[2]]))), 0)
expect_true(ncol(test[[2]]) >= 2)
expect_equal(length(which(is.na(test[[3]]))), 0)
expect_true(ncol(test[[3]]) >= 12)
expect_equal(MaxMODNO, nrow(test[[3]]))
expect_true((test[[3]]["Randomised"])[1, ] == "no")
library(testthat)
data(Mass, envir = environment())
data(MassClimate, envir = environment())
furthest = 2
closest = 2
STATS = "max"
test <- climatewin(Xvars = list(MassClimate$Temp), CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass ~ 1, data = Mass), furthest = 2, closest = 2,
FIXED = FALSE, STATS = "max", FUNCS = "L", CMISSING = FALSE)
duration  <- (furthest - closest) + 1
MaxMODNO  <- (duration * (duration + 1))/2
expect_true(is.list(test))
expect_false(is.na((test[[1]])[1]))
expect_equal(length(which(is.na(test[[2]]))), 0)
expect_true(ncol(test[[2]]) >= 2)
expect_equal(length(which(is.na(test[[3]]))), 0)
expect_true(ncol(test[[3]]) >= 12)
expect_equal(MaxMODNO, nrow(test[[3]]))
expect_true((test[[3]]["Randomised"])[1, ] == "no")
test_that("climatewin produces the right output", {
data(Mass, envir = environment())
data(MassClimate, envir = environment())
furthest = 2
closest = 2
STATS = "max"
test <- climatewin(Xvars = list(MassClimate$Temp), CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass ~ 1, data = Mass), furthest = 2, closest = 2,
FIXED = FALSE, STATS = "max", FUNCS = "L", CMISSING = FALSE)
duration  <- (furthest - closest) + 1
MaxMODNO  <- (duration * (duration + 1))/2
expect_true(is.list(test))
expect_false(is.na((test[[1]])[1]))
expect_equal(length(which(is.na(test[[2]]))), 0)
expect_true(ncol(test[[2]]) >= 2)
expect_equal(length(which(is.na(test[[3]]))), 0)
expect_true(ncol(test[[3]]) >= 12)
expect_equal(MaxMODNO, nrow(test[[3]]))
expect_true((test[[3]]["Randomised"])[1, ] == "no")
})
library(testthat)
data(Mass, envir = environment())
data(MassClimate, envir = environment())
test <- singlewin(Xvar = MassClimate$Temp, Cdate = MassClimate$Date, Bdate = Mass$Date,
baseline = lm(Mass$Mass~1), furthest = 16, closest = 15,
stat = "mean", func = "lin",
type = "variable", Cmissing = FALSE, Cinterval = "week")
devtools::load_all("climwin")
data(Mass, envir = environment())
data(MassClimate, envir = environment())
test <- singlewin(Xvar = MassClimate$Temp, Cdate = MassClimate$Date, Bdate = Mass$Date,
baseline = lm(Mass$Mass~1), furthest = 16, closest = 15,
stat = "mean", func = "lin",
type = "variable", Cmissing = FALSE, Cinterval = "week")
devtools::load_all("climwin")
data(Mass, envir = environment())
data(MassClimate, envir = environment())
test <- singlewin(Xvar = MassClimate$Temp, Cdate = MassClimate$Date, Bdate = Mass$Date,
baseline = lm(Mass$Mass~1), furthest = 16, closest = 15,
stat = "mean", func = "lin",
type = "variable", Cmissing = FALSE, Cinterval = "week")
test_that("Cinterval W works", {
data(Mass, envir = environment())
data(MassClimate, envir = environment())
test <- singlewin(Xvar = MassClimate$Temp, Cdate = MassClimate$Date, Bdate = Mass$Date,
baseline = lm(Mass$Mass~1), furthest = 1, closest = 0,
stat = "mean", func = "lin",
type = "variable", Cmissing = FALSE, Cinterval = "week")
expect_true(is.list(test))
expect_false(is.na(test[[1]][1]))
expect_equal(length(which(is.na(test[[2]]))), 0)
expect_true(ncol(test[[2]]) >= 2)
})
test_that("Cinterval M works", {
data(Mass, envir = environment())
data(MassClimate, envir = environment())
test <- singlewin(Xvar = MassClimate$Temp, Cdate = MassClimate$Date, Bdate = Mass$Date,
baseline = lm(Mass ~ 1, data = Mass), furthest = 1, closest = 0,
stat = "mean", func = "lin",
type = "variable", Cmissing = FALSE, Cinterval = "month")
expect_true(is.list(test))
expect_false(is.na(test[[1]][1]))
expect_equal(length(which(is.na(test[[2]]))), 0)
expect_true(ncol(test[[2]]) >= 2)
})
devtools::load_all("climwin")
?climatewin
OffspringWin <- climatewin(Xvar = list(Temp = OffspringClimate$Temperature),
Cdate = OffspringClimate$Date,
Bdate = Offspring$Date,
baseline = glm(Offspring ~ 1, data = Offspring, weights = Order, family = poisson),
furthest = 150, closest = 0,
type = "variables", stat = "mean",
func = c("lin", "quad"), Cmissing = FALSE, Cinterval = "day")
OffspringWin <- climatewin(Xvar = list(Temp = OffspringClimate$Temperature),
Cdate = OffspringClimate$Date,
Bdate = Offspring$Date,
baseline = glm(Offspring ~ 1, data = Offspring, weights = Order, family = poisson),
furthest = 10, closest = 0,
type = "variables", stat = "mean",
func = c("lin", "quad"), Cmissing = FALSE, Cinterval = "day")
head(Offspring)
OffspringWin <- climatewin(Xvar = list(Temp = OffspringClimate$Temperature),
Cdate = OffspringClimate$Date,
Bdate = Offspring$Date,
baseline = glm(Offspring ~ 1, data = Offspring, weights = Offspring$Order, family = poisson),
furthest = 10, closest = 0,
type = "variables", stat = "mean",
func = c("lin", "quad"), Cmissing = FALSE, Cinterval = "day")
glm(Offspring ~ 1, data = Offspring, weights = Order, family = poisson)
devtools::load_all("climwin")
OffspringWin <- climatewin(Xvar = list(Temp = OffspringClimate$Temperature),
Cdate = OffspringClimate$Date,
Bdate = Offspring$Date,
baseline = glm(Offspring ~ 1, data = Offspring, weights = Order, family = poisson),
furthest = 10, closest = 0,
type = "variables", stat = "mean",
func = c("lin", "quad"), Cmissing = FALSE, Cinterval = "day")
devtools::load_all("climwin")
OffspringWin <- climatewin(Xvar = list(Temp = OffspringClimate$Temperature),
Cdate = OffspringClimate$Date,
Bdate = Offspring$Date,
baseline = glm(Offspring ~ 1, data = Offspring, weights = Order, family = poisson),
furthest = 10, closest = 0,
type = "variables", stat = "mean",
func = c("lin", "quad"), Cmissing = FALSE, Cinterval = "day")
?update
devtools::load_all("climwin")
OffspringWin <- climatewin(Xvar = list(Temp = OffspringClimate$Temperature),
Cdate = OffspringClimate$Date,
Bdate = Offspring$Date,
baseline = glm(Offspring ~ 1, data = Offspring, weights = Order, family = poisson),
furthest = 10, closest = 0,
type = "variables", stat = "mean",
func = c("lin", "quad"), Cmissing = FALSE, Cinterval = "day")
devtools::load_all("climwin")
OffspringWin <- climatewin(Xvar = list(Temp = OffspringClimate$Temperature),
Cdate = OffspringClimate$Date,
Bdate = Offspring$Date,
baseline = glm(Offspring ~ 1, data = Offspring, weights = Order, family = poisson),
furthest = 10, closest = 0,
type = "variables", stat = "mean",
func = c("lin", "quad"), Cmissing = FALSE, Cinterval = "day")
devtools::load_all("climwin")
OffspringWin <- climatewin(Xvar = list(Temp = OffspringClimate$Temperature),
Cdate = OffspringClimate$Date,
Bdate = Offspring$Date,
baseline = glm(Offspring ~ 1, data = Offspring, weights = Order, family = poisson),
furthest = 10, closest = 0,
type = "variables", stat = "mean",
func = c("lin", "quad"), Cmissing = FALSE, Cinterval = "day")
devtools::build_win()
?plot
library(installr)
install.packages(installr)
install.packages("installr")
updateR()
library(installr)
library(installr)
updateR()
