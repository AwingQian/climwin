FIXED = TRUE, cutoff.day = 20, cutoff.month = 5)
head(MassWin[[3]])
MassWin$combos
MassWin[[1]]$Dataset
head(MassWin[[1]]$Dataset)
Dataset = MassWin[[1]]$Dataset
Dataset$delta  <- Dataset$ModelAICc - min(Dataset$ModelAICc)
Dataset$weight <- (exp(-0.5 * Dataset$delta)) / sum(exp(-0.5 * Dataset$delta))
Dataset
MassWin <- climatewin(Xvars = list(MassClimate$Temp), CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass ~ 1, data = Mass),
furthest = 1, closest = 0,
STATS = "mean", FUNCS = "L",
FIXED = TRUE, cutoff.day = 20, cutoff.month = 5)
Dataset = MassWin[[1]]$Dataset
Dataset
Dataset$delta  <- Dataset$ModelAICc - min(Dataset$ModelAICc)
Dataset$weight <- (exp(-0.5 * Dataset$delta)) / sum(exp(-0.5 * Dataset$delta))
Dataset
Dataset    <- Dataset[order(-Dataset$weight), ]
Dataset$CW <- as.numeric(cumsum(Dataset$weight) <= CW)
DatasetCW  <- subset(Dataset, CW == 1)
CW = 0.95
Dataset    <- Dataset[order(-Dataset$weight), ]
Dataset$CW <- as.numeric(cumsum(Dataset$weight) <= CW)
DatasetCW  <- subset(Dataset, CW == 1)
Dataset
DatasetCW  <- subset(Dataset, CW == 1)
DatasetCW
keep=c("closest", "WindowClose", "WindowOpen")
keep
DatasetCW                  <- DatasetCW[keep]
DatasetCW
DatasetCW                  <- melt(DatasetCW, id = "closest")
DatasetCW
DatasetCW$variable         <- factor(DatasetCW$variable, levels = c("WindowOpen", "WindowClose"))
DatasetCW
DatasetCW
DatasetCW$variable
Dataset$CW <- as.numeric(cumsum(Dataset$weight) <= CW)
DatasetCW  <- subset(Dataset, CW == 1)
keep=c("closest", "WindowClose", "WindowOpen")
DatasetCW                  <- DatasetCW[keep]
DatasetCW                  <- melt(DatasetCW, id = "closest")
DatasetCW
str(DatasetCW)
DatasetCW[which(DatasetCW$variable == "Window Open")]
DatasetCW[which(DatasetCW$variable == "Window Open"), ]
DatasetCW$variable == "Window Open"
DatasetCW
DatasetCW                  <- DatasetCW[keep]
DatasetCW                  <- melt(DatasetCW, id = "closest")
DatasetCW$variable         <- factor(DatasetCW$variable, levels = c("WindowOpen", "WindowClose"))
levels(DatasetCW$variable) <- c("Window Open", "Window Close")
DatasetCW$variable == "Window Open"
DatasetCW
Dataset$delta  <- Dataset$ModelAICc - min(Dataset$ModelAICc)
Dataset$weight <- (exp(-0.5 * Dataset$delta)) / sum(exp(-0.5 * Dataset$delta))
#Order models by weight#
Dataset    <- Dataset[order(-Dataset$weight), ]
Dataset$CW <- as.numeric(cumsum(Dataset$weight) <= CW)
DatasetCW  <- subset(Dataset, CW == 1)
keep=c("closest", "WindowClose", "WindowOpen")
DatasetCW                  <- DatasetCW[keep]
DatasetCW                  <- melt(DatasetCW, id = "closest")
DatasetCW$variable         <- factor(DatasetCW$variable, levels = c("WindowOpen", "WindowClose"))
levels(DatasetCW$variable) <- c("Window Open", "Window Close")
DatasetCW
DatasetCW$variable == "Window Open"
DatasetCW[which(DatasetCW$variable == "Window Open"), ]
?climatewin
library(climwin)
?climatewin
data(Mass)
data(MassClimate)
MassWin <- climatewin(Xvars = list(MassClimate$Temp), CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass ~ 1, data = Mass),
furthest = 5, closest = 0,
STATS = "mean", FUNCS = "L",
FIXED = TRUE, cutoff.day = 20, cutoff.month = 5,
nrandom = 0, CMISSING = FALSE, CINTERVAL = "D")
baseline <- lm(Mass ~ 1, data = Mass)
update(baseline, .~., data = Mass, environment = environment())
library(climwin)
data(Mass)
data(MassClimate)
MassWin <- climatewin(Xvars = list(MassClimate$Temp), CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass ~ 1, weights = Mass, data = Mass),
furthest = 5, closest = 0,
STATS = "mean", FUNCS = "L",
FIXED = TRUE, cutoff.day = 20, cutoff.month = 5,
nrandom = 0, CMISSING = FALSE, CINTERVAL = "D")
devtools::load_all("climwin")
data(Mass)
data(MassClimate)
MassWin <- climatewin(Xvars = list(MassClimate$Temp), CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass ~ 1, weights = Mass, data = Mass),
furthest = 5, closest = 0,
STATS = "mean", FUNCS = "L",
FIXED = TRUE, cutoff.day = 20, cutoff.month = 5,
nrandom = 0, CMISSING = FALSE, CINTERVAL = "D")
devtools::load_all("climwin")
data(Mass)
data(MassClimate)
MassWin <- climatewin(Xvars = list(MassClimate$Temp), CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass ~ 1, weights = Mass, data = Mass),
furthest = 5, closest = 0,
STATS = "mean", FUNCS = "L",
FIXED = TRUE, cutoff.day = 20, cutoff.month = 5,
nrandom = 0, CMISSING = FALSE, CINTERVAL = "D")
devtools::load_all("climwin")
data(Mass)
data(MassClimate)
MassWin <- climatewin(Xvars = list(MassClimate$Temp), CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass ~ 1, weights = Mass, data = Mass),
furthest = 5, closest = 0,
STATS = "mean", FUNCS = "L",
FIXED = TRUE, cutoff.day = 20, cutoff.month = 5,
nrandom = 0, CMISSING = FALSE, CINTERVAL = "D")
devtools::load_all("climwin")
data(Mass)
data(MassClimate)
MassWin <- climatewin(Xvars = list(MassClimate$Temp), CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass ~ 1, weights = Mass, data = Mass),
furthest = 5, closest = 0,
STATS = "mean", FUNCS = "L",
FIXED = TRUE, cutoff.day = 20, cutoff.month = 5,
nrandom = 0, CMISSING = FALSE, CINTERVAL = "D")
test_that("climatewin produces the right output", {
data(Mass, envir = environment())
data(MassClimate, envir = environment())
furthest = 2
closest = 2
STATS = "max"
test <- climatewin(Xvars = list(MassClimate$Temp), CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass ~ 1, data = Mass), furthest = 2, closest = 2,
FIXED = FALSE, STATS = "max", FUNCS = "L", CMISSING = FALSE)
duration  <- (furthest - closest) + 1
MaxMODNO  <- (duration * (duration + 1))/2
expect_true(is.list(test))
expect_false(is.na((test[[1]])[1]))
expect_equal(length(which(is.na(test[[2]]))), 0)
expect_true(ncol(test[[2]]) >= 2)
expect_equal(length(which(is.na(test[[3]]))), 0)
expect_true(ncol(test[[3]]) >= 12)
expect_equal(MaxMODNO, nrow(test[[3]]))
expect_true((test[[3]]["Randomised"])[1, ] == "no")
})
library(devtools)
test_that("climatewin produces the right output", {
data(Mass, envir = environment())
data(MassClimate, envir = environment())
furthest = 2
closest = 2
STATS = "max"
test <- climatewin(Xvars = list(MassClimate$Temp), CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass ~ 1, data = Mass), furthest = 2, closest = 2,
FIXED = FALSE, STATS = "max", FUNCS = "L", CMISSING = FALSE)
duration  <- (furthest - closest) + 1
MaxMODNO  <- (duration * (duration + 1))/2
expect_true(is.list(test))
expect_false(is.na((test[[1]])[1]))
expect_equal(length(which(is.na(test[[2]]))), 0)
expect_true(ncol(test[[2]]) >= 2)
expect_equal(length(which(is.na(test[[3]]))), 0)
expect_true(ncol(test[[3]]) >= 12)
expect_equal(MaxMODNO, nrow(test[[3]]))
expect_true((test[[3]]["Randomised"])[1, ] == "no")
})
data(Mass, envir = environment())
data(MassClimate, envir = environment())
furthest = 2
closest = 2
STATS = "max"
test <- climatewin(Xvars = list(MassClimate$Temp), CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass ~ 1, data = Mass), furthest = 2, closest = 2,
FIXED = FALSE, STATS = "max", FUNCS = "L", CMISSING = FALSE)
duration  <- (furthest - closest) + 1
MaxMODNO  <- (duration * (duration + 1))/2
expect_true(is.list(test))
expect_false(is.na((test[[1]])[1]))
expect_equal(length(which(is.na(test[[2]]))), 0)
expect_true(ncol(test[[2]]) >= 2)
expect_equal(length(which(is.na(test[[3]]))), 0)
expect_true(ncol(test[[3]]) >= 12)
expect_equal(MaxMODNO, nrow(test[[3]]))
expect_true((test[[3]]["Randomised"])[1, ] == "no")
library(testthat)
data(Mass, envir = environment())
data(MassClimate, envir = environment())
furthest = 2
closest = 2
STATS = "max"
test <- climatewin(Xvars = list(MassClimate$Temp), CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass ~ 1, data = Mass), furthest = 2, closest = 2,
FIXED = FALSE, STATS = "max", FUNCS = "L", CMISSING = FALSE)
duration  <- (furthest - closest) + 1
MaxMODNO  <- (duration * (duration + 1))/2
expect_true(is.list(test))
expect_false(is.na((test[[1]])[1]))
expect_equal(length(which(is.na(test[[2]]))), 0)
expect_true(ncol(test[[2]]) >= 2)
expect_equal(length(which(is.na(test[[3]]))), 0)
expect_true(ncol(test[[3]]) >= 12)
expect_equal(MaxMODNO, nrow(test[[3]]))
expect_true((test[[3]]["Randomised"])[1, ] == "no")
test_that("climatewin produces the right output", {
data(Mass, envir = environment())
data(MassClimate, envir = environment())
furthest = 2
closest = 2
STATS = "max"
test <- climatewin(Xvars = list(MassClimate$Temp), CDate = MassClimate$Date, BDate = Mass$Date,
baseline = lm(Mass ~ 1, data = Mass), furthest = 2, closest = 2,
FIXED = FALSE, STATS = "max", FUNCS = "L", CMISSING = FALSE)
duration  <- (furthest - closest) + 1
MaxMODNO  <- (duration * (duration + 1))/2
expect_true(is.list(test))
expect_false(is.na((test[[1]])[1]))
expect_equal(length(which(is.na(test[[2]]))), 0)
expect_true(ncol(test[[2]]) >= 2)
expect_equal(length(which(is.na(test[[3]]))), 0)
expect_true(ncol(test[[3]]) >= 12)
expect_equal(MaxMODNO, nrow(test[[3]]))
expect_true((test[[3]]["Randomised"])[1, ] == "no")
})
library(testthat)
data(Mass, envir = environment())
data(MassClimate, envir = environment())
test <- singlewin(Xvar = MassClimate$Temp, Cdate = MassClimate$Date, Bdate = Mass$Date,
baseline = lm(Mass$Mass~1), furthest = 16, closest = 15,
stat = "mean", func = "lin",
type = "variable", Cmissing = FALSE, Cinterval = "week")
devtools::load_all("climwin")
data(Mass, envir = environment())
data(MassClimate, envir = environment())
test <- singlewin(Xvar = MassClimate$Temp, Cdate = MassClimate$Date, Bdate = Mass$Date,
baseline = lm(Mass$Mass~1), furthest = 16, closest = 15,
stat = "mean", func = "lin",
type = "variable", Cmissing = FALSE, Cinterval = "week")
devtools::load_all("climwin")
data(Mass, envir = environment())
data(MassClimate, envir = environment())
test <- singlewin(Xvar = MassClimate$Temp, Cdate = MassClimate$Date, Bdate = Mass$Date,
baseline = lm(Mass$Mass~1), furthest = 16, closest = 15,
stat = "mean", func = "lin",
type = "variable", Cmissing = FALSE, Cinterval = "week")
test_that("Cinterval W works", {
data(Mass, envir = environment())
data(MassClimate, envir = environment())
test <- singlewin(Xvar = MassClimate$Temp, Cdate = MassClimate$Date, Bdate = Mass$Date,
baseline = lm(Mass$Mass~1), furthest = 1, closest = 0,
stat = "mean", func = "lin",
type = "variable", Cmissing = FALSE, Cinterval = "week")
expect_true(is.list(test))
expect_false(is.na(test[[1]][1]))
expect_equal(length(which(is.na(test[[2]]))), 0)
expect_true(ncol(test[[2]]) >= 2)
})
test_that("Cinterval M works", {
data(Mass, envir = environment())
data(MassClimate, envir = environment())
test <- singlewin(Xvar = MassClimate$Temp, Cdate = MassClimate$Date, Bdate = Mass$Date,
baseline = lm(Mass ~ 1, data = Mass), furthest = 1, closest = 0,
stat = "mean", func = "lin",
type = "variable", Cmissing = FALSE, Cinterval = "month")
expect_true(is.list(test))
expect_false(is.na(test[[1]][1]))
expect_equal(length(which(is.na(test[[2]]))), 0)
expect_true(ncol(test[[2]]) >= 2)
})
devtools::load_all("climwin")
?climatewin
OffspringWin <- climatewin(Xvar = list(Temp = OffspringClimate$Temperature),
Cdate = OffspringClimate$Date,
Bdate = Offspring$Date,
baseline = glm(Offspring ~ 1, data = Offspring, weights = Order, family = poisson),
furthest = 150, closest = 0,
type = "variables", stat = "mean",
func = c("lin", "quad"), Cmissing = FALSE, Cinterval = "day")
OffspringWin <- climatewin(Xvar = list(Temp = OffspringClimate$Temperature),
Cdate = OffspringClimate$Date,
Bdate = Offspring$Date,
baseline = glm(Offspring ~ 1, data = Offspring, weights = Order, family = poisson),
furthest = 10, closest = 0,
type = "variables", stat = "mean",
func = c("lin", "quad"), Cmissing = FALSE, Cinterval = "day")
head(Offspring)
OffspringWin <- climatewin(Xvar = list(Temp = OffspringClimate$Temperature),
Cdate = OffspringClimate$Date,
Bdate = Offspring$Date,
baseline = glm(Offspring ~ 1, data = Offspring, weights = Offspring$Order, family = poisson),
furthest = 10, closest = 0,
type = "variables", stat = "mean",
func = c("lin", "quad"), Cmissing = FALSE, Cinterval = "day")
glm(Offspring ~ 1, data = Offspring, weights = Order, family = poisson)
devtools::load_all("climwin")
OffspringWin <- climatewin(Xvar = list(Temp = OffspringClimate$Temperature),
Cdate = OffspringClimate$Date,
Bdate = Offspring$Date,
baseline = glm(Offspring ~ 1, data = Offspring, weights = Order, family = poisson),
furthest = 10, closest = 0,
type = "variables", stat = "mean",
func = c("lin", "quad"), Cmissing = FALSE, Cinterval = "day")
devtools::load_all("climwin")
OffspringWin <- climatewin(Xvar = list(Temp = OffspringClimate$Temperature),
Cdate = OffspringClimate$Date,
Bdate = Offspring$Date,
baseline = glm(Offspring ~ 1, data = Offspring, weights = Order, family = poisson),
furthest = 10, closest = 0,
type = "variables", stat = "mean",
func = c("lin", "quad"), Cmissing = FALSE, Cinterval = "day")
?update
devtools::load_all("climwin")
OffspringWin <- climatewin(Xvar = list(Temp = OffspringClimate$Temperature),
Cdate = OffspringClimate$Date,
Bdate = Offspring$Date,
baseline = glm(Offspring ~ 1, data = Offspring, weights = Order, family = poisson),
furthest = 10, closest = 0,
type = "variables", stat = "mean",
func = c("lin", "quad"), Cmissing = FALSE, Cinterval = "day")
devtools::load_all("climwin")
OffspringWin <- climatewin(Xvar = list(Temp = OffspringClimate$Temperature),
Cdate = OffspringClimate$Date,
Bdate = Offspring$Date,
baseline = glm(Offspring ~ 1, data = Offspring, weights = Order, family = poisson),
furthest = 10, closest = 0,
type = "variables", stat = "mean",
func = c("lin", "quad"), Cmissing = FALSE, Cinterval = "day")
devtools::load_all("climwin")
OffspringWin <- climatewin(Xvar = list(Temp = OffspringClimate$Temperature),
Cdate = OffspringClimate$Date,
Bdate = Offspring$Date,
baseline = glm(Offspring ~ 1, data = Offspring, weights = Order, family = poisson),
furthest = 10, closest = 0,
type = "variables", stat = "mean",
func = c("lin", "quad"), Cmissing = FALSE, Cinterval = "day")
devtools::build_win()
?plot
library(installr)
install.packages(installr)
install.packages("installr")
updateR()
library(installr)
library(installr)
updateR()
devtools::check("climwin")
length(58:9)
length(64:7)
50/58
data(MassOutput)
data(MassRand)
#Real data
dataset <- MassOutput
cw1 <- 0.95
cw2 <- 0.5
cw3 <- 0.25
a          <- c(cw1, cw2, cw3)
b          <- a[order (-a)]
cw         <- cw1
cw1        <- b[1]
cw2        <- b[2]
cw3        <- b[3]
WeightDist <- ceiling(100*mean(as.numeric(cumsum(dataset$ModWeight) <= cw1)))
ConfidenceSet <- dataset[which(cumsum(dataset$ModWeight) <= cw1), ]
SpreadMatrix <- matrix(nrow = (nrow(ConfidenceSet)- 1), ncol = 2)
for(i in 2:nrow(ConfidenceSet)){
SpreadMatrix[i - 1, 1] <- i
SpreadMatrix[i - 1, 2] <- sqrt((ConfidenceSet$WindowOpen[1] - ConfidenceSet$WindowOpen[i])^2 +
(ConfidenceSet$WindowClose[1] - ConfidenceSet$WindowClose[i])^2)
}
WeightSpread <- ceiling(max(SpreadMatrix[, 2]))
#Order models by weight#
dataset        <- dataset[order(-dataset$ModWeight), ]
dataset$cw1    <- as.numeric(cumsum(dataset$ModWeight) <= cw1)
dataset$cw2    <- as.numeric(cumsum(dataset$ModWeight) <= cw2)
dataset$cw3    <- as.numeric(cumsum(dataset$ModWeight) <= cw3)
dataset$cw.full <- dataset$cw1 + dataset$cw2 + dataset$cw3
dataset$cw.full[which(dataset$cw.full == 3)] <- cw3
dataset$cw.full[which(dataset$cw.full == 2)] <- cw2
dataset$cw.full[which(dataset$cw.full == 1)] <- cw1
dataset$cw.full[which(dataset$cw.full == 0)] <- 1
WEIGHT1 <- ggplot(dataset, aes(x = WindowClose, y = WindowOpen, z = cw.full))+
geom_tile(aes(fill = cw.full))+
scale_fill_gradientn(colours = c("black", "white"), breaks=c(b[1], b[2], b[3]), limits = c(0, 1), name = "")+
theme_classic()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(size = 0.25, colour = "black"),
legend.position = c(0.75, 0.3),
text = element_text(size = 30),
panel.border = element_rect(colour = "black", fill = NA))+
ggtitle(paste(100*cw, "% confidence set\n", "Model number:", WeightDist, "% of total models \n",
"Model spread:", WeightSpread))+
ylab("Window start")+
xlab("Window end")
#Random data
dataset <- subset(MassRand, Repeat == 1)
cw1 <- 0.95
cw2 <- 0.5
cw3 <- 0.25
a          <- c(cw1, cw2, cw3)
b          <- a[order (-a)]
cw         <- cw1
cw1        <- b[1]
cw2        <- b[2]
cw3        <- b[3]
WeightDist <- ceiling(100*mean(as.numeric(cumsum(dataset$ModWeight) <= cw1)))
ConfidenceSet <- dataset[which(cumsum(dataset$ModWeight) <= cw1), ]
SpreadMatrix <- matrix(nrow = (nrow(ConfidenceSet)- 1), ncol = 2)
for(i in 2:nrow(ConfidenceSet)){
SpreadMatrix[i - 1, 1] <- i
SpreadMatrix[i - 1, 2] <- sqrt((ConfidenceSet$WindowOpen[1] - ConfidenceSet$WindowOpen[i])^2 +
(ConfidenceSet$WindowClose[1] - ConfidenceSet$WindowClose[i])^2)
}
WeightSpread <- ceiling(max(SpreadMatrix[, 2]))
#Order models by weight#
dataset        <- dataset[order(-dataset$ModWeight), ]
dataset$cw1    <- as.numeric(cumsum(dataset$ModWeight) <= cw1)
dataset$cw2    <- as.numeric(cumsum(dataset$ModWeight) <= cw2)
dataset$cw3    <- as.numeric(cumsum(dataset$ModWeight) <= cw3)
dataset$cw.full <- dataset$cw1 + dataset$cw2 + dataset$cw3
dataset$cw.full[which(dataset$cw.full == 3)] <- cw3
dataset$cw.full[which(dataset$cw.full == 2)] <- cw2
dataset$cw.full[which(dataset$cw.full == 1)] <- cw1
dataset$cw.full[which(dataset$cw.full == 0)] <- 1
WEIGHT2 <- ggplot(dataset, aes(x = WindowClose, y = WindowOpen, z = cw.full))+
geom_tile(aes(fill = cw.full))+
scale_fill_gradientn(colours = c("black", "white"), breaks=c(b[1], b[2], b[3]), limits = c(0, 1), name = "")+
theme_classic()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(size = 0.25, colour = "black"),
legend.position = c(0.75, 0.3),
text = element_text(size = 30),
panel.border = element_rect(colour = "black", fill = NA))+
ggtitle(paste(100*cw, "% confidence set\n", "Model number:", WeightDist, "% of total models \n",
"Model spread:", WeightSpread))+
ylab("Window start")+
xlab("Window end")
gridExtra::grid.arrange(WEIGHT1, WEIGHT2, nrow = 1)
devtools::load_all("climwin")
devtools::test("climwin")
devtools::test("climwin")
devtools::load_all("climwin")
devtools::test("climwin")
devtools::load_all("climwin")
devtools::test("climwin")
devtools::load_all("climwin")
data(Mass, envir = environment())
Mass$Plot <- c(rep(c("A", "B"), 23), "A")
data(MassClimate, envir = environment())
MassClimate$Plot <- "A"
MassClimate2 <- MassClimate
MassClimate2$Plot <- "B"
Clim <- rbind(MassClimate, MassClimate2)
furthest = 2
closest = 1
stat = "max"
repeats = 2
rand <- randwin(repeats = 2, xvar = list(Temp = Clim$Temp), cdate = Clim$Date,
bdate = Mass$Date, baseline = lm(Mass ~ 1, data = Mass),
range = c(2, 1), spatial = list(Mass$Plot, Clim$Plot),
type = "relative", stat = "max", func = "lin", cmissing = FALSE)
devtools::load_all("climwin")
rand <- randwin(repeats = 2, xvar = list(Temp = Clim$Temp), cdate = Clim$Date,
bdate = Mass$Date, baseline = lm(Mass ~ 1, data = Mass),
range = c(2, 1), spatial = list(Mass$Plot, Clim$Plot),
type = "relative", stat = "max", func = "lin", cmissing = FALSE)
head(rand)
is.list(rand)
rand[[1]]
rand[[1]][, 4]
length(which(is.na(rand[[1]][, 4])))
ncol(rand[[1]])
expect_equal(repeats, nrow(rand))
nrow(rand[[1]]
)
devtools::test("climwin'")
devtools::load_all("climwin")
?plotweights
data(MassOutput)
plotweights(dataset = MassOutput, cw1 = 0.95, cw2 = 0.75, cw3 = 0.25)
devtools::load_all("climwin")
data(MassOutput)
plotweights(dataset = MassOutput, cw1 = 0.95, cw2 = 0.75, cw3 = 0.25)
devtools::load_all("climwin")
devtools::load_all("climwin")
devtools::load_all("climwin")
?plothist
data(MassOutput)
plothist(dataset = MassOutput)
data(MassOutput)
plothist(dataset = MassOutput, original = TRUE)
data(MassOutput)
plothist(dataset = MassOutput, original = FALSE)
data(MassOutput)
data(MassRand)
plothist(dataset = MassOutput, datasetrand = MassRand, original = TRUE)
plothist(dataset = MassOutput, datasetrand = MassRand, original = FALSE)
devtools::load_all("climwin")
plothist(dataset = MassOutput, datasetrand = MassRand, original = FALSE)
devtools::load_all("climwin")
devtools::load_all("climwin")
plothist(dataset = MassOutput, datasetrand = MassRand, original = FALSE)
devtools::load_all("climwin")
plothist(dataset = MassOutput, datasetrand = MassRand, original = FALSE)
devtools::load_all("climwin")
plothist(dataset = MassOutput, datasetrand = MassRand, original = FALSE)
nrow(Mass)
devtools::load_all("climwin")
plothist(dataset = MassOutput, datasetrand = MassRand, original = FALSE)
